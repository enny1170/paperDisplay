#include <Arduino.h>
// include library, include base class, make path known
#include <GxEPD.h>
#include "SD.h"
#include "SPI.h"
#include <Adafruit_I2CDevice.h>
#include <SI7021.h>
#include <WiFi.h>

//! There are three versions of the 2.13 screen,
//  if you are not sure which version, please test each one,
//  if it is successful then it belongs to the model of the file name
//  关于v2.3版本的显示屏版本,如果不确定购买的显示屏型号,请每个头文件都测试一遍.

//#include <GxGDE0213B1/GxGDE0213B1.h>      // 2.13" b/w
//#include <GxGDEH0213B72/GxGDEH0213B72.h>  // 2.13" b/w new panel
#include <GxGDEH0213B73/GxGDEH0213B73.h>  // 2.13" b/w newer panel

int bmpWidth = 150, bmpHeight = 39;
//width:150,height:39
const unsigned char lilygo[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x31, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xfe, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0xff, 0x20, 0x7f, 0xc0, 0x03, 0xfc, 0x7f, 0x80, 0x07, 0xf8, 0x0f, 0xf0, 0x00, 0xfe, 0x00, 0x03, 0xff, 0x80, 0x19, 0xe7, 0x30, 0x7f, 0xc0, 0x03, 0xfc, 0x7f, 0x80, 0x07, 0xfc, 0x0f, 0xf0, 0x07, 0xff, 0xc0, 0x0f, 0xff, 0xe0, 0x19, 0xe7, 0xb0, 0x7f, 0xc0, 0x03, 0xfc, 0x7f, 0x80, 0x03, 0xfc, 0x1f, 0xe0, 0x0f, 0xff, 0xe0, 0x1f, 0xff, 0xf8, 0x19, 0xff, 0x10, 0x7f, 0xc0, 0x03, 0xfc, 0x7f, 0x80, 0x03, 0xfe, 0x1f, 0xe0, 0x1f, 0xff, 0xf0, 0x3f, 0xff, 0xfc, 0x19, 0xff, 0x10, 0x3f, 0xc0, 0x03, 0xfc, 0x7f, 0x80, 0x03, 0xfe, 0x1f, 0xc0, 0x3f, 0xff, 0xf0, 0x7f, 0xff, 0xfe, 0x19, 0xfe, 0x10, 0x3f, 0xc0, 0x03, 0xfc, 0x7f, 0x80, 0x01, 0xfe, 0x3f, 0xc0, 0x7f, 0xff, 0xe0, 0x7f, 0xff, 0xfe, 0x19, 0xfe, 0x10, 0x3f, 0xc0, 0x03, 0xfc, 0x7f, 0x80, 0x01, 0xff, 0x3f, 0x80, 0xff, 0xc7, 0xc0, 0xff, 0xff, 0xff, 0x1d, 0xfe, 0x10, 0x3f, 0xc0, 0x03, 0xfc, 0x7f, 0x80, 0x00, 0xff, 0x7f, 0x80, 0xff, 0x81, 0x80, 0xff, 0xef, 0xff, 0x1d, 0xef, 0x00, 0x3f, 0xc0, 0x03, 0xfc, 0x7f, 0x80, 0x00, 0xff, 0xff, 0x00, 0xff, 0x00, 0x00, 0xff, 0xc3, 0xff, 0x8f, 0xef, 0x00, 0x3f, 0xc0, 0x03, 0xfc, 0x7f, 0x80, 0x00, 0x7f, 0xff, 0x01, 0xff, 0x00, 0x01, 0xff, 0xc3, 0xff, 0x8f, 0x87, 0x80, 0x3f, 0xc0, 0x03, 0xfc, 0x7f, 0x80, 0x00, 0x7f, 0xfe, 0x01, 0xfe, 0x00, 0x01, 0xff, 0xc1, 0xff, 0x87, 0x81, 0xc0, 0x3f, 0xc0, 0x03, 0xfc, 0x7f, 0x80, 0x00, 0x7f, 0xfe, 0x01, 0xfe, 0x1f, 0x81, 0xff, 0x81, 0xff, 0x83, 0xff, 0x80, 0x3f, 0xc0, 0x03, 0xfc, 0x7f, 0x80, 0x00, 0x3f, 0xfc, 0x01, 0xfe, 0x3f, 0xf9, 0xff, 0x81, 0xff, 0x80, 0xfe, 0x00, 0x3f, 0xc0, 0x03, 0xfc, 0x7f, 0x80, 0x00, 0x3f, 0xfc, 0x01, 0xfe, 0x3f, 0xf9, 0xff, 0x81, 0xff, 0x80, 0x00, 0x00, 0x3f, 0xc0, 0x03, 0xfc, 0x7f, 0x80, 0x00, 0x1f, 0xf8, 0x01, 0xfe, 0x3f, 0xf9, 0xff, 0x81, 0xff, 0x80, 0x00, 0x00, 0x3f, 0xc0, 0x03, 0xfc, 0x7f, 0x80, 0x00, 0x1f, 0xf0, 0x01, 0xff, 0x3f, 0xf9, 0xff, 0xc1, 0xff, 0x80, 0x00, 0x00, 0x3f, 0xc0, 0x03, 0xfc, 0x7f, 0x80, 0x00, 0x0f, 0xf0, 0x01, 0xff, 0x3f, 0xf8, 0xff, 0xc1, 0xff, 0x80, 0x00, 0x00, 0x3f, 0xc0, 0x03, 0xfc, 0x7f, 0x80, 0x00, 0x0f, 0xf0, 0x00, 0xff, 0x9f, 0xf8, 0xff, 0xc1, 0xff, 0x80, 0x00, 0x00, 0x3f, 0xc0, 0x03, 0xfc, 0x7f, 0x80, 0x00, 0x0f, 0xf0, 0x00, 0xff, 0x83, 0xf0, 0xff, 0xe1, 0xff, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x03, 0xfc, 0x7f, 0xf8, 0x00, 0x0f, 0xf0, 0x00, 0xff, 0xe3, 0xf0, 0x7f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xe3, 0xfc, 0x7f, 0xff, 0xc0, 0x0f, 0xf0, 0x00, 0x7f, 0xff, 0xf0, 0x7f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xe3, 0xfc, 0x7f, 0xff, 0xc0, 0x0f, 0xf0, 0x00, 0x7f, 0xff, 0xf0, 0x3f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xe3, 0xfc, 0x7f, 0xff, 0xc0, 0x0f, 0xf0, 0x00, 0x3f, 0xff, 0xf0, 0x3f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xe3, 0xfc, 0x7f, 0xff, 0xc0, 0x0f, 0xf0, 0x00, 0x1f, 0xff, 0xf0, 0x1f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xe3, 0xf8, 0x7f, 0xff, 0xc0, 0x0f, 0xf0, 0x00, 0x0f, 0xff, 0xf0, 0x0f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xc3, 0xf8, 0x1f, 0xff, 0xc0, 0x0f, 0xe0, 0x00, 0x03, 0xff, 0xe0, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0xf0, 0x00, 0x3f, 0x80, 0x07, 0xe0, 0x00, 0x00, 0xff, 0x80, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};


// FreeFonts from Adafruit_GFX
#include <Fonts/FreeSansBold9pt7b.h>
#include <Fonts/FreeSansBold12pt7b.h>
#include <Fonts/FreeSansBold18pt7b.h>
#include <Fonts/FreeSansBold24pt7b.h>
#include <Fonts/FreeSans9pt7b.h>
#include <Fonts/FreeMono9pt7b.h>
#include <OpenSans48Bold.h>
#include <OpenSans72Bold.h>
#include <SansSerifBold72.h>

#include <GxIO/GxIO_SPI/GxIO_SPI.h>
#include <GxIO/GxIO.h>

#define SPI_MOSI 23
#define SPI_MISO -1
#define SPI_CLK 18

#define ELINK_SS 5
#define ELINK_BUSY 4
#define ELINK_RESET 16
#define ELINK_DC 17

#define SDCARD_SS 13
#define SDCARD_CLK 14
#define SDCARD_MOSI 15
#define SDCARD_MISO 2

#define BUTTON_PIN 39
#define SDA_PIN 21
#define SCL_PIN 22
#define VBAT_PIN 35

#define MAX_BAT_VOLTAGE 3.8
#define MIN_BAT_VOLTAGE 2.3
#define ROUND_2_INT(f) ((int)(f >= 0.0 ? (f + 0.5) : (f - 0.5))) 

GxIO_Class io(SPI, /*CS=5*/ ELINK_SS, /*DC=*/ ELINK_DC, /*RST=*/ ELINK_RESET);
GxEPD_Class display(io, /*RST=*/ ELINK_RESET, /*BUSY=*/ ELINK_BUSY);

SPIClass sdSPI(VSPI);

SI7021 sensor;

const char *skuNum = "SKU:H239";
bool sdOK = false;
int startX = 40, startY = 10;
const char *ssid="WLAN2";
const char *passwd="altes-rumpel-2";

RTC_DATA_ATTR int recordCounter = 0;

void drawTemperature(float tempValue,int humidityPercent)
{
    display.setTextColor(GxEPD_BLACK);
    display.setFont(&SansSerif_bold_72);
    display.setCursor(0,display.height()/2);
    display.printf("%.1f ",tempValue);
    display.setFont(&FreeSansBold18pt7b);
    display.setCursor(display.width()/2,display.height()-25);
    display.printf("%i%%",humidityPercent);
}

float getBatVoltage()
{
    int measurment=analogRead(VBAT_PIN);
    return (3.3/4096)*measurment*2;
}

void drawBattState(float value,float minValue)
{
    //draw outline
    // calculate Border points
    int xMin=display.width()-30;
    int xMax=xMin+30;
    int yMin=5; //make sure you habe 3 Pixels left for the Bat Head
    int yMax=display.height()-17;
    display.drawRect(xMin,yMin,xMax-xMin,yMax-yMin,GxEPD_BLACK);
    display.drawLine(xMin+5,yMin-1,xMax-5,yMin-1,GxEPD_BLACK);
    display.drawLine(xMin+5,yMin-2,xMax-5,yMin-2,GxEPD_BLACK);
    display.drawLine(xMin+5,yMin-3,xMax-5,yMin-3,GxEPD_BLACK);

    int maxLines=yMax-yMin;
    float loadFactor=MAX_BAT_VOLTAGE-minValue;
    float valueFactor=value-minValue;
    float batPercent=(valueFactor/loadFactor)*100;
    int missingPercent=ROUND_2_INT(batPercent);
    Serial.printf("\nLoad Factor: %f, Value Factor: %f, Bat Percent: %f\n",loadFactor,valueFactor,batPercent);
    int runLines=((float)maxLines/100)*(missingPercent);
    Serial.printf("Max Lines: %i, Percent Lines: %i, Bat Percent: %i",maxLines,runLines,missingPercent);
    //fill Bat
    for (size_t i = 0; i < runLines; i++)
    {
      display.drawLine(xMin,yMax-i,xMax,yMax-i,GxEPD_BLACK);
    }
    // Set Markers
    int _25percentLine=((float)maxLines/100)*(25);
    int _50percentLine=((float)maxLines/100)*(50);
    int _75percentLine=((float)maxLines/100)*(75);
    if(missingPercent<25)
    {
      display.drawLine(xMin+2,yMax-_25percentLine,xMax-2,yMax-_25percentLine,GxEPD_BLACK);
      display.drawLine(xMin+2,yMax-_50percentLine,xMax-2,yMax-_50percentLine,GxEPD_BLACK);
      display.drawLine(xMin+2,yMax-_75percentLine,xMax-2,yMax-_75percentLine,GxEPD_BLACK);
      display.drawLine(xMin+2,yMax-_25percentLine-1,xMax-2,yMax-_25percentLine-1,GxEPD_BLACK);
      display.drawLine(xMin+2,yMax-_50percentLine-1,xMax-2,yMax-_50percentLine-1,GxEPD_BLACK);
      display.drawLine(xMin+2,yMax-_75percentLine-1,xMax-2,yMax-_75percentLine-1,GxEPD_BLACK);
    }
    else if(missingPercent>25 && missingPercent<50)
    {
      display.drawLine(xMin+2,yMax-_25percentLine,xMax-2,yMax-_25percentLine,GxEPD_WHITE);
      display.drawLine(xMin+2,yMax-_50percentLine,xMax-2,yMax-_50percentLine,GxEPD_BLACK);
      display.drawLine(xMin+2,yMax-_75percentLine,xMax-2,yMax-_75percentLine,GxEPD_BLACK);
      display.drawLine(xMin+2,yMax-_25percentLine-1,xMax-2,yMax-_25percentLine-1,GxEPD_WHITE);
      display.drawLine(xMin+2,yMax-_50percentLine-1,xMax-2,yMax-_50percentLine-1,GxEPD_BLACK);
      display.drawLine(xMin+2,yMax-_75percentLine-1,xMax-2,yMax-_75percentLine-1,GxEPD_BLACK);
    }
    else if(missingPercent>50 && missingPercent<75)
    {
      display.drawLine(xMin+2,yMax-_25percentLine,xMax-2,yMax-_25percentLine,GxEPD_WHITE);
      display.drawLine(xMin+2,yMax-_50percentLine,xMax-2,yMax-_50percentLine,GxEPD_WHITE);
      display.drawLine(xMin+2,yMax-_75percentLine,xMax-2,yMax-_75percentLine,GxEPD_BLACK);
      display.drawLine(xMin+2,yMax-_25percentLine-1,xMax-2,yMax-_25percentLine-1,GxEPD_WHITE);
      display.drawLine(xMin+2,yMax-_50percentLine-1,xMax-2,yMax-_50percentLine-1,GxEPD_WHITE);
      display.drawLine(xMin+2,yMax-_75percentLine-1,xMax-2,yMax-_75percentLine-1,GxEPD_BLACK);
    }
    else
    {
      display.drawLine(xMin+2,yMax-_25percentLine,xMax-2,yMax-_25percentLine,GxEPD_WHITE);
      display.drawLine(xMin+2,yMax-_50percentLine,xMax-2,yMax-_50percentLine,GxEPD_WHITE);
      display.drawLine(xMin+2,yMax-_75percentLine,xMax-2,yMax-_75percentLine,GxEPD_WHITE);
      display.drawLine(xMin+2,yMax-_25percentLine-1,xMax-2,yMax-_25percentLine-1,GxEPD_WHITE);
      display.drawLine(xMin+2,yMax-_50percentLine-1,xMax-2,yMax-_50percentLine-1,GxEPD_WHITE);
      display.drawLine(xMin+2,yMax-_75percentLine-1,xMax-2,yMax-_75percentLine-1,GxEPD_WHITE);
    }
    
    
    //printout Value
    display.setFont(&FreeSans9pt7b);
    display.setCursor(xMin -6 ,yMax+15);
    display.printf("%.1fV",value);
}

void drawIpAddress(IPAddress address)
{
    display.setFont(&FreeSans9pt7b);
    display.setCursor(2,display.height()-1);
    display.print(address.toString());   
}

void drawCounter()
{
    display.setFont(&FreeSans9pt7b);
    display.setCursor(1,display.height()-20);
    display.printf("Wakeup: %i",recordCounter);   
}

void setup()
{
    Serial.begin(115200);
    Serial.println();
    Serial.println("setup");
    sensor.begin(SDA_PIN,SCL_PIN);
    pinMode(VBAT_PIN,INPUT);
    SPI.begin(SPI_CLK, SPI_MISO, SPI_MOSI, ELINK_SS);
    Serial.println("Start WiFi");
    WiFi.begin(ssid,passwd);
    // while (WiFi.waitForConnectResult()!= WL_CONNECTED)
    // {
    //   Serial.print("-");
    //   delay(500);
    // }
    
    display.init(); // enable diagnostic output on Serial

    display.setRotation(1);
    display.setTextColor(GxEPD_BLACK);
    //display.setFont(&FreeSansBold24pt7b);
    display.setFont(&FreeSansBold9pt7b);
    display.setCursor(0,display.height());
    // display.setFont(&FreeMonoBold9pt7b);
    // display.setCursor(0, 0);

    // sdSPI.begin(SDCARD_CLK, SDCARD_MISO, SDCARD_MOSI, SDCARD_SS);

    // if (!SD.begin(SDCARD_SS, sdSPI)) {
    //     sdOK = false;
    // } else {
    //     sdOK = true;
    // }

    // display.fillScreen(GxEPD_WHITE);

    // display.drawBitmap(lilygo, startX, startY,  bmpWidth, bmpHeight, GxEPD_BLACK);

    // display.setCursor(display.width()  - display.width() / 2, display.height() - 35);

    // display.println(skuNum);

    // display.setTextColor(GxEPD_BLACK);

    // display.setCursor(display.width()   / 2 - 40, display.height() - 10);


    // if (sdOK) {
    //     uint32_t cardSize = SD.cardSize() / (1024 * 1024);
    //     display.println("SDCard:" + String(cardSize) + "MB");
    // } else {
    //     display.println("SDCard  None");
    // }
    //display.update();
    display.fillScreen(GxEPD_WHITE);
    float tempValue=(float)sensor.getCelsiusHundredths();
    int humidityValue=sensor.getHumidityPercent();
    float bat= getBatVoltage();
    tempValue=tempValue/100;
    Serial.printf("\nBat. Voltage: %f V\n",bat);
    Serial.printf("\nTemperature: %f , Humidity: %i\n",tempValue,humidityValue);
    drawTemperature(tempValue,humidityValue);
    drawBattState(bat,MIN_BAT_VOLTAGE);
    drawIpAddress(WiFi.localIP());
    recordCounter++;
    drawCounter();
    display.update();
    // goto sleep
    WiFi.disconnect();
    esp_sleep_enable_ext0_wakeup((gpio_num_t)BUTTON_PIN, LOW);
    esp_sleep_enable_timer_wakeup(600000000);
    esp_deep_sleep_start();
}


void loop()
{
}